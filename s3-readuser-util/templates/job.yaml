apiVersion: batch/v1
kind: Job
metadata:
  name: s3-init
  namespace: minio
spec:
  template:
    metadata:
      labels:
        sidecar.istio.io/inject: "false"
    spec:
      containers:
        - name: minio-client
          image: minio/mc
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio
                  key: root-user
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: minio
                  key: root-password
          command: ["/bin/sh", "-c"]
          args:
            - |
              mc alias set s3 http://minio.minio-test:9000 $MINIO_ACCESS_KEY $MINIO_SECRET_KEY;
              if [ "{{ .Values.s3.action }}" = "create" ]; then
                echo "Creating user {{ .Values.s3.username }}...";
                mc admin policy create s3 {{.Values.s3.policyName}} /config/readuser.json;
                mc admin user add s3 {{.Values.s3.username}} {{.Values.s3.password}};
                mc admin policy attach s3 {{.Values.s3.policyName}} --user {{.Values.s3.username}};
              elif [ "{{ .Values.s3.action }}" = "delete" ]; then
                echo "Deleting user {{ .Values.s3.username }}...";
                mc admin user remove s3 {{ .Values.s3.username }};
              fi
          volumeMounts:
            - name: config-volume
              mountPath: /config
      restartPolicy: OnFailure
      volumes:
        - name: config-volume
          configMap:
            name: s3-policy
